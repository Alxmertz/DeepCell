'''Train a simple deep CNN on a nuclei 31x31 dataset.
GPU run command:
	THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python cifar10_cnn.py

'''

from __future__ import print_function
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers.normalization import BatchNormalization
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras.regularizers import l2
from keras.optimizers import SGD, RMSprop
from keras.utils import np_utils

from cnn_functions import load_training_data, rate_scheduler, get_data_sample, ImageDataGenerator, categorical_sum
from model_zoo import feature_net_31x31

import os
import datetime
import numpy as np 

batch_size = 32
nb_classes = 3
nb_epoch = 5
data_augmentation = True

base_directory = "/home/vanvalen/ImageAnalysis/DeepCell2"
trained_network_directory = os.path.join(base_directory, "trained_networks")
data_directory = os.path.join(base_directory, "training_data_npz")
training_data_file_name = os.path.join(data_directory, "nuclei_all_nodilation_31x31.npz")

print(base_directory, trained_network_directory, data_directory, training_data_file_name)

todays_date = datetime.datetime.now().strftime("%Y-%m-%d")
file_name_save = os.path.join(trained_network_directory, todays_date + "_nuclei_all_cell1_nodilation_31x31.h5")
file_name_save_loss = os.path.join(trained_network_directory, todays_date + "_nuclei_all_cell1_nodilation_31x31")
train_dict, (X_test, Y_test) = get_data_sample(training_data_file_name)

# input image dimensions
img_rows, img_cols = 31, 31
img_channels = 2

# the data, shuffled and split between train and test sets
print('X_train shape:', train_dict["channels"].shape)
print(train_dict["pixels_x"].shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
train_dict["labels"] = np_utils.to_categorical(train_dict["labels"], nb_classes)
Y_test = np_utils.to_categorical(Y_test, nb_classes)

print(Y_test)
model = feature_net_31x31(init = 'glorot_uniform')

# let's train the model using SGD + momentum (how original).
# sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
rmsprop = RMSprop(lr = 0.001, rho = 0.99, epsilon = 1e-8)

model.compile(loss='categorical_crossentropy',
			  optimizer=rmsprop,
			  metrics=['accuracy', categorical_sum])

print('Using real-time data augmentation.')

# this will do preprocessing and realtime data augmentation
datagen = ImageDataGenerator(
	rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
	width_shift_range=0,  # randomly shift images horizontally (fraction of total width)
	height_shift_range=0,  # randomly shift images vertically (fraction of total height)
	horizontal_flip=False,  # randomly flip images
	vertical_flip=False)  # randomly flip images

# fit the model on the batches generated by datagen.flow()
loss_history = model.fit_generator(datagen.sample_flow(train_dict, batch_size=batch_size),
					samples_per_epoch=len(train_dict["labels"]),
					nb_epoch=nb_epoch,
					validation_data=(X_test, Y_test),
					callbacks = [ModelCheckpoint(file_name_save, monitor = 'val_loss', verbose = 0, save_best_only = False, mode = 'auto'),
						LearningRateScheduler(rate_scheduler(lr = 0.001))])

temp = model.test_on_batch(X_test, Y_test)
temp2 = model.predict_on_batch(X_test)

print(temp)
print(temp2)
print(Y_test)
#model.save_weights(file_name_save)
np.savez(file_name_save_loss, loss_history=loss_history.history)