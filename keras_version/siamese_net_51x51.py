'''Train a simple deep CNN on a HeLa dataset.
GPU run command:
	THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python cifar10_cnn.py

'''

#from __future__ import print_function
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers.normalization import BatchNormalization
from keras.callbacks import ModelCheckpoint
from keras.regularizers import l2
from keras.optimizers import SGD, RMSprop
from keras.utils import np_utils

from cnn_functions import get_data_siamese, contrastive_loss, morgan_loss, same_loss, ImageDataGenerator
from model_zoo import siamese_net_51x51, simple_siamese

import os
import datetime
import numpy as np

batch_size = 256
nb_epoch = 20

trained_network_directory = "/home/nquach/DeepCell2/trained_networks/"
data_directory = "/home/nquach/DeepCell2/training_data_npz/"
training_data_file_name = os.path.join(data_directory, "nuclei_all_siamese_51x51.npz")

todays_date = datetime.datetime.now().strftime("%Y-%m-%d")

train_dict, (test_input_dict, test_label_dict) = get_data_siamese(training_data_file_name)

# input image dimensions
img_rows, img_cols = 51, 51
img_channels = 1

# the data, shuffled and split between train and test sets
print('X_train shape:', train_dict["image_list"].shape)
print(len(train_dict["ids"]), 'train samples')
print(len(test_label_dict["lambda_1"]), 'test samples')

for it in xrange(5):

	file_name_save = os.path.join(trained_network_directory, todays_date + "_nuclei_all_siamese_51x51_" + str(it) + ".h5")
	file_name_save_loss = os.path.join(trained_network_directory, todays_date + "_nuclei_all_siamese_51x51_" + str(it) + ".npz")
	model = siamese_net_51x51()

	# let's train the model using SGD + momentum (how original).
	# sgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
	rmsprop = RMSprop(lr = 0.001, rho = 0.95, epsilon = 1e-8)

	model.compile(loss=contrastive_loss,
				  optimizer=rmsprop,
				  )

	print('Using real-time data augmentation.')

	# this will do preprocessing and realtime data augmentation
	datagen = ImageDataGenerator(
		samplewise_center=False,
		samplewise_std_normalization=False,
		rotation_range = 0,  # randomly rotate images in the range (degrees, 0 to 180)
		rotate = True, # randomly rotate images in increments of 90 degrees
		shear_range = False, # randomly shear images in the range (radians , -shear_range to shear_range)
		horizontal_flip = False,  # randomly flip images
		vertical_flip = False)  # randomly flip images

	# fit the model on the batches generated by datagen.flow()
	loss_history = model.fit_generator(datagen.siamese_flow(train_dict, batch_size=batch_size),
						samples_per_epoch=len(train_dict["labels"]),
						nb_epoch=nb_epoch,
						validation_data=(test_input_dict, test_label_dict),
						callbacks = [ModelCheckpoint(file_name_save, monitor = 'val_loss', verbose = 0, save_best_only = True, mode = 'auto')])

	np.savez(file_name_save_loss, loss_history = loss_history.history)